namespace testapi . flatbuffers;

table Primitives {
  // scalars (excluding enums) + string
  a: uint8;
  b: uint16;
  c: uint32;
  d: uint64;
  e: int8;
  f: int16;
  g: int32;
  h: int64;
  i: float32;
  j: float64;
  k: bool;
  l: string;
}
root_type Primitives;
file_identifier "PRIM";

enum Color: short { Red = -2, Green = 0, Blue, Gray = 5, Black = 8 }

struct StructWithEnum {
  x: byte;
  y: Color;
  z: byte;
}

table Enums {
  x: Color;
  y: StructWithEnum;
  xs: [Color];
  ys: [StructWithEnum];
}

struct Struct1 {
  x: ubyte;
  y: byte;
  z: byte;
}

struct Struct2 (force_align: 4) {
  x: short;
}

struct Struct3 {
  x: Struct2;
  y: ulong;
  z: ubyte;
}

struct Struct4 {
  w: Struct2;
  x: byte;
  y: long;
  z: bool;
}

table Structs {
  a: Struct1;
  b: Struct2;
  c: Struct3;
  d: Struct4;
}

table NestedTables {
  x: Table1;
}

table Table1 {
  x: Table2;
  y: int;
}

table Table2 {
  x: short;
}

union Weapon { Sword, Axe }
table Sword { x: string; }
table Axe { y: int; }

table TableWithUnion {
  uni: Weapon;
}

table Vectors {
  a: [uint8];
  b: [uint16];
  c: [uint32];
  d: [uint64];
  e: [int8];
  f: [int16];
  g: [int32];
  h: [int64];
  i: [float32];
  j: [float64];
  k: [bool];
  l: [string];
}

table VectorOfTables {
  xs: [Axe];
}

table VectorOfStructs {
  as: [Struct1];
  bs: [Struct2];
  cs: [Struct3];
  ds: [Struct4];
}

table ScalarsWithDefaults {
  a: uint8 = 8;
  b: uint16 = 16;
  c: uint32 = 32;
  d: uint64 = 64;
  e: int8 = -1;
  f: int16 = -2;
  g: int32 = -4;
  h: int64 = -8;
  i: float32 = 3.9;
  j: float64 = -2.3e10;
  k: bool = true;
  l: bool = false;
  m: Color = Blue;
  n: Color = 5;
}

table DeprecatedFields {
  a: byte;
  b: int (deprecated);
  c: byte;
  d: string (deprecated);
  e: byte;
  f: Weapon (deprecated); // deprecated union, should leave 2 vtable entries empty
  g: byte;
}

table RequiredFields {
  a: string (required);
  b: Struct1 (required);
  c: Axe (required);
  d: Weapon (required);
  e: [int] (required);
}

// TODO: add support

// union UnionOfStructs { UOS_A, UOS_B }
// struct UOS_A { x: int32; }
// struct UOS_B { x: int64; }

// union UnionOfStrings {
//   Name: string,
//   Thing: string,
//   Id: UnionA
// }

// table ManyUnionsOfStructs {
//   x: UnionOfStructs;
//   xs: [UnionOfStructs];
// }

// table MenyUnionsOfStrings {
//   x: UnionOfString;
//   xs: [UnionOfStrings]
// }

